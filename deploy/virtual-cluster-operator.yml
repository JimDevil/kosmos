---
apiVersion: v1
kind: Namespace
metadata:
  name: kosmos-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: virtual-cluster-operator
  namespace: kosmos-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: virtual-cluster-operator
rules:
  - apiGroups: ['*']
    resources: ['*']
    verbs: ["*"]
  - nonResourceURLs: ['*']
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: virtual-cluster-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: virtual-cluster-operator
subjects:
  - kind: ServiceAccount
    name: virtual-cluster-operator
    namespace: kosmos-system
---
apiVersion: v1
kind: Secret
metadata:
  name: virtual-cluster-operator
  namespace: kosmos-system
type: Opaque
data:
  # kubeconfig from outside cluster
  kubeconfig: __kubeconfig__

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: virtual-cluster-operator
  namespace: kosmos-system
data:
  kubelet_node_helper.sh: |
    #!/usr/bin/env bash

    SCRIPT_VERSION=0.0.1
    # save tmp file
    PATH_FILE_TMP=/apps/conf/kosmos/tmp
    ###################################################
    # path for kubeadm
    PATH_KUBEADM=/usr/bin/kubeadm
    ##################################################
    # path for kubernetes
    PATH_KUBERNETES=/etc/kubernetes/
    PATH_KUBERNETES_PKI="$PATH_KUBERNETES/pki"
    # scpKCCmd.name
    KUBELET_KUBE_CONFIG_NAME=kubelet.conf
    ##################################################
    # path for kubelet
    PATH_KUBELET_LIB=/var/lib/kubelet
    # scpKubeletConfigCmd.name
    KUBELET_CONFIG_NAME=config.yaml

    # args
    DNS_ADDRESS=${2:-10.237.0.10}
    LOG_NAME=${2:-kubelet}

    function unjoin() {
        # before unjoin, you need delete node by kubectl
        echo "exec(1/2): kubeadm reset...."
        echo "y" | ${PATH_KUBEADM} reset
        if [ $? -ne 0 ]; then
            exit 1
        fi
        echo "exec(2/2): reset kubeadm-flags.env...."
        cp "$PATH_FILE_TMP/kubeadm-flags.env.back" "$PATH_KUBELET_LIB/kubeadm-flags.env"
        if [ $? -ne 0 ]; then
            exit 1
        fi
    }

    # before join, you need upload ca.crt and kubeconfig to tmp dir!!!
    function join() {
        echo "exec(1/7): stop containerd...."
        systemctl stop containerd
        if [ $? -ne 0 ]; then
            exit 1
        fi
        echo "exec(2/7): copy ca.crt...."
        cp "$PATH_FILE_TMP/ca.crt" "$PATH_KUBERNETES_PKI/ca.crt"
        if [ $? -ne 0 ]; then
            exit 1
        fi
        echo "exec(3/7): copy kubeconfig...."
        cp "$PATH_FILE_TMP/$KUBELET_KUBE_CONFIG_NAME" "$PATH_KUBERNETES/$KUBELET_KUBE_CONFIG_NAME"
        if [ $? -ne 0 ]; then
            exit 1
        fi
        echo "exec(4/7): set core dns address...."
        sed -e "s|__DNS_ADDRESS__|$DNS_ADDRESS|g" -e "w ${PATH_KUBELET_LIB}/${KUBELET_CONFIG_NAME}" "$PATH_FILE_TMP"/"$KUBELET_CONFIG_NAME"
        if [ $? -ne 0 ]; then
            exit 1
        fi
        echo "exec(5/7): copy kubeadm-flags.env...."
        cp "$PATH_FILE_TMP/kubeadm-flags.env" "$PATH_KUBELET_LIB/kubeadm-flags.env"
        if [ $? -ne 0 ]; then
            exit 1
        fi
        echo "exec(6/7): start containerd"
        systemctl start containerd
        if [ $? -ne 0 ]; then
            exit 1
        fi
        echo "exec(7/7): start kubelet...."
        systemctl start kubelet
        if [ $? -ne 0 ]; then
            exit 1
        fi
    }

    function health() {
        result=`systemctl is-active containerd`
        if [[ $result != "active" ]]; then
            echo "health(1/2): containerd is inactive"
            exit 1
        else
            echo "health(1/2): containerd is active"
        fi

        result=`systemctl is-active kubelet`
        if [[ $result != "active" ]]; then
            echo "health(2/2): kubelet is inactive"
            exit 1
        else
            echo "health(2/2): containerd is active"
        fi
    }

    function log() {
        systemctl status $LOG_NAME
    }

    # check the environments
    function check() {
        if [ ! -d "$PATH_FILE_TMP" ]; then
            echo "check(1/3): try to create $PATH_FILE_TMP"
            mkdir -p "$PATH_FILE_TMP"
            if [ $? -ne 0 ]; then
                exit 1
            fi
            echo "check(2/3): copy  kubeadm-flags.env  to create $PATH_FILE_TMP and remove args[cloud-provider] "
            sed -e "s| --cloud-provider=external | |g" -e "w ${PATH_FILE_TMP}/kubeadm-flags.env" "$PATH_KUBELET_LIB/kubeadm-flags.env"
            if [ $? -ne 0 ]; then
                exit 1
            fi
            echo "check(3/3):  backup kubeadm-flags.env"
            cp "$PATH_KUBELET_LIB/kubeadm-flags.env" "$PATH_FILE_TMP/kubeadm-flags.env.back"
            if [ $? -ne 0 ]; then
                exit 1
            fi
        fi
        echo "environments is ok"
    }

    function version() {
        echo "$SCRIPT_VERSION"
    }

    # See how we were called.
    case "$1" in
      unjoin)
        unjoin
        ;;
      join)
        join
        ;;
      health)
        health
        ;;
      check)
        check
        ;;
      log)
        log
        ;;
      version)
        version
        ;;
      *)
        echo $"usage: $0 unjoin|join|health|log|check|version"
        exit 1
    esac
  config.yaml: |
    apiVersion: kubelet.config.k8s.io/v1beta1
    authentication:
      anonymous:
        enabled: false
      webhook:
        cacheTTL: 0s
        enabled: true
      x509:
        clientCAFile: /etc/kubernetes/pki/ca.crt
    authorization:
      mode: Webhook
      webhook:
        cacheAuthorizedTTL: 0s
        cacheUnauthorizedTTL: 0s
    cgroupDriver: cgroupfs
    clusterDNS:
    - __DNS_ADDRESS__
    clusterDomain: cluster.local
    cpuManagerReconcilePeriod: 0s
    evictionHard:
      imagefs.available: 15%
      memory.available: 100Mi
      nodefs.available: 10%
      nodefs.inodesFree: 5%
    evictionPressureTransitionPeriod: 5m0s
    fileCheckFrequency: 0s
    healthzBindAddress: 127.0.0.1
    healthzPort: 10248
    httpCheckFrequency: 0s
    imageMinimumGCAge: 0s
    kind: KubeletConfiguration
    kubeAPIBurst: 100
    kubeAPIQPS: 100
    kubeReserved:
      cpu: 140m
      memory: 1.80G
    logging:
      flushFrequency: 0
      options:
        json:
          infoBufferSize: "0"
      verbosity: 0
    memorySwap: {}
    nodeStatusReportFrequency: 0s
    nodeStatusUpdateFrequency: 0s
    rotateCertificates: true
    runtimeRequestTimeout: 0s
    shutdownGracePeriod: 0s
    shutdownGracePeriodCriticalPods: 0s
    staticPodPath: /etc/kubernetes/manifests
    streamingConnectionIdleTimeout: 0s
    syncFrequency: 0s
    volumeStatsAggPeriod: 0s
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: virtual-cluster-operator
  namespace: kosmos-system
  labels:
    app: virtual-cluster-operator
spec:
  replicas: 1
  selector:
    matchLabels:
      app: virtual-cluster-operator
  template:
    metadata:
      labels:
        app: virtual-cluster-operator
    spec:
      # Enter the name of the node where the virtual cluster operator is deployed
      nodeName: nodeName
      serviceAccountName: virtual-cluster-operator
      containers:
      - name: virtual-cluster-operator
        # Change a valid image address
        image: ghcr.io/kosmos-io/virtual-cluster-operator:__VERSION__
        imagePullPolicy: IfNotPresent
        env:
          - name: IMAGE_REPOSITIRY
            value: ghcr.io/kosmos-io
          - name: IMAGE_VERSION
            value: v1.25.7
            # Enter the ip address of a master node
          - name: EXECTOR_HOST_MASTER_NODE_IP
            value: 192.168.0.1
            # WEB_USER and WEB_PASS for generate token that can be used to access the node-agent
          - name: WEB_USER
            valueFrom:
              secretKeyRef:
                name: node-agent-secret
                key: username
          - name: WEB_PASS
            valueFrom:
              secretKeyRef:
                name: node-agent-secret
                key: password
        volumeMounts:
        - name: credentials
          mountPath: /etc/virtual-cluster-operator
          readOnly: true
        - name: shellscript
          mountPath: /etc/vc-node-dir/kubelet_node_helper.sh
          subPath: kubelet_node_helper.sh
        - name: shellscript
          mountPath: /etc/vc-node-dir/config.yaml
          subPath: config.yaml
        - mountPath: /kosmos/manifest
          name: components-manifest
        command:
        - virtual-cluster-operator
        - --kubeconfig=/etc/virtual-cluster-operator/kubeconfig
        - --v=4
      volumes:
      - name: credentials
        secret:
          secretName: virtual-cluster-operator
      - name: shellscript
        configMap:
          name: virtual-cluster-operator
      - hostPath:
          path: /home/vc-operator/manifest
          type: DirectoryOrCreate
        name: components-manifest
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-agent
  namespace: kosmos-system
spec:
  selector:
    matchLabels:
      app: node-agent-service
  template:
    metadata:
      labels:
        app: node-agent-service
    spec:
      hostPID: true # access host pid
      hostIPC: true # access host ipc
      hostNetwork: true # access host network
      tolerations:
        - operator: Exists # run on all nodes
      initContainers:
        - name: init-agent
          image: cis-hub-huabei-3.cmecloud.cn/node-agent/node-agent:latest
          securityContext:
            privileged: true
          env:
            - name: WEB_USER
              valueFrom:
                secretKeyRef:
                  name: node-agent-secret
                  key: username
            - name: WEB_PASS
              valueFrom:
                secretKeyRef:
                  name: node-agent-secret
                  key: password
          command: ["/bin/bash"]
          args:
            - "-c"
            - "sed -i 's/^WEB_USER=.*/WEB_USER=$(WEB_USER)/' /app/agent.env && sed -i 's/^WEB_PASS=.*/WEB_PASS=$(WEB_PASS)/' /app/agent.env && rsync -avz /app/ /host-path/ && cp /app/node-agent.service /host-systemd/node-agent.service "
          volumeMounts:
            - mountPath: /host-path
              name: node-agent
              readOnly: false
            - mountPath: /host-systemd
              name: systemd-path
              readOnly: false
      containers:
        - name: install-agent
          image: cis-hub-huabei-3.cmecloud.cn/node-agent/node-agent:latest
          securityContext:
            privileged: true # container privileged
          command:
            - nsenter
            - --target
            - "1"
            - --mount
            - --uts
            - --ipc
            - --net
            - --pid
            - --
            - bash
            - -l
            - -c
            - "/srv/node-agent/start.sh && sleep infinity"
      volumes:
        - name: node-agent
          hostPath:
            path: /srv/node-agent
            type: DirectoryOrCreate
        - name: systemd-path
          hostPath:
            path: /etc/systemd/system
            type: DirectoryOrCreate
---
apiVersion: v1
kind: Secret
metadata:
  name: node-agent-secret
  namespace: kosmos-system
type: kubernetes.io/basic-auth
data:
  username: {{ .USERNAME }}
  password: {{ .PASSWORD }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kosmos-hostports
  namespace: kosmos-system
data:
  config.yaml: |
    # ports allocate for virtual cluster api server,from 33001, increment by 1 for each virtual cluster.Be careful not to use ports that are already in use
    portsPool:
      - 33001
      - 33002
      - 33003
      - 33004
      - 33005
      - 33006
      - 33007
      - 33008
      - 33009
      - 33010
    # when port is allocate from pool,it will be used for virtual cluster api server,and the port will be released after virtual cluster is deleted
    clusterPorts:
